Introduction to NumPy and Pandas
1. NumPy: Numerical Computing in Python
NumPy (Numerical Python) is a powerful library for working with numerical data and performing fast mathematical operations.

Installing NumPy
bash
Copy
Edit
pip install numpy
Importing NumPy
 
import numpy as np
2. Creating NumPy Arrays
Creating a NumPy Array from a List
 
arr = np.array([1, 2, 3, 4, 5])
print(arr)
# Output: [1 2 3 4 5]
ðŸ”¹ NumPy arrays are faster and more memory-efficient than Python lists.

Creating Arrays with Zeros, Ones, and Random Numbers
 
zeros = np.zeros((2, 3))  # 2x3 matrix of zeros
ones = np.ones((3, 3))    # 3x3 matrix of ones
randoms = np.random.rand(2, 2)  # 2x2 matrix with random values

print(zeros)
print(ones)
print(randoms)
Creating an Array with a Range of Numbers (arange & linspace)
 
arr1 = np.arange(1, 10, 2)  # [1, 3, 5, 7, 9]
arr2 = np.linspace(1, 10, 5)  # 5 equally spaced numbers from 1 to 10
ðŸ”¹ arange(start, stop, step) generates evenly spaced values.
ðŸ”¹ linspace(start, stop, num) generates num evenly spaced values.

3. Manipulating NumPy Arrays
Shape & Reshaping Arrays
 
arr = np.array([[1, 2, 3], [4, 5, 6]])
print(arr.shape)  # (2, 3)

reshaped = arr.reshape(3, 2)  # Reshaping to 3x2
print(reshaped)
ðŸ”¹ .shape shows the dimensions of an array.
ðŸ”¹ .reshape(rows, cols) changes the shape without altering data.

Indexing & Slicing NumPy Arrays
 
arr = np.array([10, 20, 30, 40, 50])
print(arr[1])   # 20
print(arr[-1])  # 50
print(arr[1:4]) # [20, 30, 40]
ðŸ”¹ Similar to Python lists, NumPy allows indexing and slicing.

Mathematical Operations on NumPy Arrays
 
arr = np.array([1, 2, 3, 4])
print(arr + 10)  # [11 12 13 14]
print(arr * 2)   # [2 4 6 8]
print(arr ** 2)  # [1 4 9 16]
ðŸ”¹ NumPy broadcasts operations across all elements.

Aggregation Functions
 
arr = np.array([10, 20, 30, 40])
print(np.sum(arr))    # 100
print(np.mean(arr))   # 25.0
print(np.min(arr))    # 10
print(np.max(arr))    # 40
ðŸ”¹ NumPy provides efficient functions for sum, mean, min, max, etc..

4. Pandas: Data Analysis Library
Pandas is used for handling structured tabular data (DataFrames).

Installing Pandas
bash
Copy
Edit
pip install pandas
Importing Pandas
 
import pandas as pd
5. Creating and Using DataFrames in Pandas
Creating a DataFrame from a Dictionary
 
data = {
    "Name": ["Alice", "Bob", "Charlie"],
    "Age": [25, 30, 35],
    "City": ["New York", "London", "Paris"]
}

df = pd.DataFrame(data)
print(df)
ðŸ”¹ DataFrames are structured tables similar to Excel spreadsheets.

Loading Data from a CSV File
 
df = pd.read_csv("data.csv")
print(df.head())  # First 5 rows
ðŸ”¹ Pandas can read/write CSV, Excel, JSON, SQL, and more.

Accessing Data in DataFrames
 
print(df["Name"])      # Access a column
print(df.iloc[0])      # Access first row
print(df.loc[0, "Age"])  # Access a specific value
ðŸ”¹ Use .iloc[] for index-based selection and .loc[] for label-based selection.

6. Manipulating Data in Pandas
Adding a New Column
 
df["Salary"] = [50000, 60000, 70000]
print(df)
Filtering Data
 
filtered_df = df[df["Age"] > 30]
print(filtered_df)
ðŸ”¹ Pandas allows filtering rows based on conditions.

Sorting Data
 
df_sorted = df.sort_values("Age", ascending=False)
print(df_sorted)
ðŸ”¹ .sort_values(column, ascending=True/False) sorts the DataFrame.

Handling Missing Data
 
df.fillna(0)  # Replace NaN with 0
df.dropna()   # Remove rows with NaN values
ðŸ”¹ .fillna(value) replaces missing values.
ðŸ”¹ .dropna() removes rows with missing values.

7. Summary
Feature	NumPy	Pandas
Best For	Numerical data	Tabular data (like Excel)
Data Structure	Arrays (ndarray)	DataFrames (df)
Operations	Fast numerical operations	Data analysis & manipulation
Indexing	Numeric	Column names & row indices
