Object-Oriented Programming (OOP) in Python
Object-Oriented Programming (OOP) is a paradigm that allows us to structure programs using objects, which are instances of classes.

1. Classes and Objects
What is a Class?
A class is a blueprint for creating objects. It defines attributes (data) and methods (functions).

What is an Object?
An object is an instance of a class. It has its own state (attributes) and behavior (methods).

Defining a Class and Creating an Object
 
class Car:
    def __init__(self, brand, model, year):  # Constructor
        self.brand = brand  # Instance attribute
        self.model = model
        self.year = year

    def display_info(self):  # Method
        return f"{self.year} {self.brand} {self.model}"

# Creating objects (instances)
car1 = Car("Toyota", "Corolla", 2022)
car2 = Car("Honda", "Civic", 2021)

print(car1.display_info())  # 2022 Toyota Corolla
print(car2.display_info())  # 2021 Honda Civic
üîπ __init__ is the constructor that initializes object attributes.
üîπ self refers to the instance of the class.

2. Attributes and Methods
Instance Attributes
Instance attributes are unique to each object.

 
car1 = Car("Ford", "Mustang", 2023)
car2 = Car("Tesla", "Model S", 2022)

# Modifying attributes
car1.year = 2024  
print(car1.year)  # 2024
print(car2.year)  # 2022
Instance Methods
Instance methods are functions that operate on object attributes.

 
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def greet(self):
        return f"Hello, my name is {self.name} and I am {self.age} years old."

p1 = Person("Alice", 25)
print(p1.greet())  # Hello, my name is Alice and I am 25 years old.
üîπ Instance methods always have self as the first parameter.

Class Methods and Static Methods
Class Method (@classmethod)
A class method modifies class-level attributes and is shared across all instances.

 
class Employee:
    company = "TechCorp"  # Class attribute

    def __init__(self, name):
        self.name = name

    @classmethod
    def set_company(cls, new_company):
        cls.company = new_company

# Change company name for all instances
Employee.set_company("Code Inc")
print(Employee.company)  # Code Inc
üîπ Uses @classmethod and cls instead of self.
üîπ Affects all instances since it modifies class attributes.

Static Method (@staticmethod)
A static method doesn‚Äôt modify class or instance attributes.

 
class MathUtils:
    @staticmethod
    def add(a, b):
        return a + b

print(MathUtils.add(5, 3))  # 8
üîπ No self or cls is used.
üîπ Useful for utility functions inside a class.

3. Instance vs Class-Level Attributes
Attribute Type	Defined In	Shared Across Instances?	Accessed Using
Instance Attribute	__init__ method	‚ùå No (Unique for each object)	self.attribute_name
Class Attribute	Inside class (outside __init__)	‚úÖ Yes (Same for all objects)	ClassName.attribute_name
Example of Instance vs. Class Attributes
 
class Dog:
    species = "Canis familiaris"  # Class Attribute

    def __init__(self, name, age):
        self.name = name  # Instance Attribute
        self.age = age

dog1 = Dog("Buddy", 3)
dog2 = Dog("Charlie", 5)

print(dog1.species)  # Canis familiaris
print(dog2.species)  # Canis familiaris

# Changing instance attribute
dog1.name = "Rocky"
print(dog1.name)  # Rocky
print(dog2.name)  # Charlie

# Changing class attribute (affects all instances)
Dog.species = "Wolf"
print(dog1.species)  # Wolf
print(dog2.species)  # Wolf
üîπ species is a class attribute, shared by all dogs.
üîπ name and age are instance attributes, unique to each dog.

4. Summary
Concept	Description	Example
Class	Blueprint for objects	class Car: ...
Object	Instance of a class	car1 = Car("Toyota", "Corolla", 2022)
Instance Attributes	Unique to each object	self.name = name
Class Attributes	Shared across instances	company = "TechCorp"
Instance Methods	Operate on instance attributes	def greet(self): ...
Class Methods	Modify class attributes	@classmethod def set_company(cls): ...
Static Methods	Independent functions inside class	@staticmethod def add(a, b): ...
