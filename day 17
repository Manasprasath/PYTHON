Python for Automation (Part 2) ðŸš€
Web Automation with Selenium
Selenium is a powerful tool for automating web interactions like:
âœ… Logging into websites
âœ… Filling out forms
âœ… Scraping data

1. Installing and Setting Up Selenium
Step 1: Install Selenium
bash
Copy
Edit
pip install selenium
Step 2: Download a Web Driver
Selenium requires a browser driver (e.g., ChromeDriver for Chrome).

ðŸ”¹ Download ChromeDriver: https://sites.google.com/chromium.org/driver/
ðŸ”¹ Ensure the ChromeDriver version matches your Chrome browser.

Step 3: Set Up Selenium in Python
 
from selenium import webdriver

# Initialize WebDriver
driver = webdriver.Chrome()  # Ensure chromedriver.exe is in PATH
driver.get("https://www.google.com")  # Open Google
ðŸ”¹ The WebDriver acts like a real browser but can be controlled programmatically.

2. Logging into a Website using Selenium
Example: Automating Login to a Website
 
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
import time

# Step 1: Open the browser
driver = webdriver.Chrome()

# Step 2: Navigate to the login page
driver.get("https://example.com/login")  # Replace with actual login URL

# Step 3: Find username & password fields and enter credentials
username_field = driver.find_element(By.NAME, "username")  # Find by 'name' attribute
password_field = driver.find_element(By.NAME, "password")

username_field.send_keys("your_username")
password_field.send_keys("your_password")

# Step 4: Click the login button
login_button = driver.find_element(By.XPATH, "//button[@type='submit']")
login_button.click()

# Step 5: Wait for login to complete
time.sleep(5)  # Adjust based on website load time

# Step 6: Verify login success
print("Login Successful!")

# Close the browser
driver.quit()
ðŸ”¹ find_element(By.NAME, "username") finds the input field by name.
ðŸ”¹ send_keys("your_username") enters text into the field.
ðŸ”¹ click() simulates clicking the login button.

3. Scraping Data from a Website
Example: Scraping Titles from a Webpage
 
from selenium import webdriver
from selenium.webdriver.common.by import By
import time

# Open the browser
driver = webdriver.Chrome()

# Go to a website
driver.get("https://news.ycombinator.com/")  # Hacker News website

# Wait for the page to load
time.sleep(3)

# Find all news titles
titles = driver.find_elements(By.CLASS_NAME, "titleline")

# Print titles
for title in titles:
    print(title.text)

# Close the browser
driver.quit()
ðŸ”¹ find_elements(By.CLASS_NAME, "titleline") finds multiple elements.
ðŸ”¹ .text extracts text from an element.

4. Handling Captchas & Advanced Automation
Use API-based solutions like 2Captcha.
Use Headless Mode for running Selenium without opening a browser:
 
from selenium.webdriver.chrome.options import Options

options = Options()
options.add_argument("--headless")  # Run in headless mode
driver = webdriver.Chrome(options=options)
5. Summary
Feature	Selenium Command
Open Browser	webdriver.Chrome()
Navigate to URL	driver.get("url")
Find Elements	find_element(By.NAME, "username")
Enter Text	send_keys("your_text")
Click Button	click()
Extract Data	.text
